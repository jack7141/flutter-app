import 'package:celeb_voice/common/widgets/common_app_%20bar.dart';
import 'package:celeb_voice/common/widgets/form_button.dart';
import 'package:celeb_voice/constants/gaps.dart';
import 'package:celeb_voice/constants/sizes.dart';
import 'package:celeb_voice/features/main/models/celeb_models.dart';
import 'package:celeb_voice/features/user_info/repos/job_repo.dart';
import 'package:celeb_voice/features/user_info/view_models/user_info_view_model.dart';
import 'package:celeb_voice/features/user_info/views/attitude_screen.dart';
import 'package:celeb_voice/features/user_info/widgets/celeb_avatar.dart';
import 'package:celeb_voice/features/user_info/widgets/interest_button.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';

class JobScreen extends ConsumerStatefulWidget {
  static const String routeName = "job";
  final CelebModel? celeb;

  const JobScreen({super.key, this.celeb});

  @override
  ConsumerState<JobScreen> createState() => _JobScreenState();
}

class _JobScreenState extends ConsumerState<JobScreen> {
  final JobRepo _jobRepo = JobRepo();
  List<Map<String, dynamic>> jobs = [];
  bool isLoading = true;

  @override
  void initState() {
    super.initState();
    print("üè† JobScreen initState Ìò∏Ï∂úÎê®");
    _loadJobs();
  }

  Future<void> _loadJobs() async {
    print("üîÑ ÏßÅÏóÖ Î™©Î°ù Î°úÎî© ÏãúÏûë");
    final jobList = await _jobRepo.getJobs();
    setState(() {
      if (jobList != null) {
        jobs = jobList;
        print("‚úÖ ÏßÅÏóÖ Î™©Î°ù Î°úÎî© ÏôÑÎ£å: ${jobs.length}Í∞ú");
        for (var job in jobs) {
          print("   - ${job['name']} (ID: ${job['id']})");
        }
      } else {
        print("‚ùå ÏßÅÏóÖ Î™©Î°ù Î°úÎî© Ïã§Ìå®");
      }
      isLoading = false;
    });
  }

  void _onJobSelected(String job, int id) {
    print("üéØ JobScreen - ÏßÅÏóÖ ÏÑ†ÌÉùÎê®: $job (ID: $id)");
    print("üîç Provider ÏóÖÎç∞Ïù¥Ìä∏ Ï†Ñ ÏÉÅÌÉú: ${ref.read(userInfoProvider).selectedJob}");

    ref.read(userInfoProvider.notifier).updateJob(job, id);

    // ÏóÖÎç∞Ïù¥Ìä∏ ÌõÑ ÏÉÅÌÉú ÌôïÏù∏
    final updatedState = ref.read(userInfoProvider);
    print("üîç Provider ÏóÖÎç∞Ïù¥Ìä∏ ÌõÑ ÏÉÅÌÉú:");
    print("   selectedJob: ${updatedState.selectedJob}");
    print("   selectedJobId: ${updatedState.selectedJobId}");
  }

  void _onNextTap(BuildContext context) {
    final userInfo = ref.read(userInfoProvider);

    print("üîç JobScreen - Îã§Ïùå Î≤ÑÌäº ÌÅ¥Î¶≠");
    print("üîç ÌòÑÏû¨ ÏÑ†ÌÉùÎêú ÏßÅÏóÖ: ${userInfo.selectedJob}");

    if (userInfo.selectedJob != null) {
      print("‚úÖ ÏßÅÏóÖ ÏÑ†ÌÉùÎê® - Attitude ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô");

      if (widget.celeb != null) {
        print("üé≠ ÏÖÄÎüΩ Ï†ïÎ≥¥ÏôÄ Ìï®Íªò Ïù¥Îèô: ${widget.celeb!.name}");
        context.push('/attitude', extra: widget.celeb);
      } else {
        print("üé≠ ÏÖÄÎüΩ Ï†ïÎ≥¥ ÏóÜÏù¥ Ïù¥Îèô");
        context.pushNamed(AttitudeScreen.routeName);
      }
    } else {
      print("‚ùå ÏßÅÏóÖ ÎØ∏ÏÑ†ÌÉù - Ïä§ÎÇµÎ∞î ÌëúÏãú");
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text('ÏßÅÏóÖÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî')));
    }
  }

  @override
  Widget build(BuildContext context) {
    final userInfo = ref.watch(userInfoProvider);

    print("üèóÔ∏è JobScreen build Ìò∏Ï∂úÎê®");
    print("üîç ÌòÑÏû¨ ÏÉÅÌÉú - ÏÑ†ÌÉùÎêú ÏßÅÏóÖ: ${userInfo.selectedJob}");

    return Scaffold(
      backgroundColor: Theme.of(context).appBarTheme.backgroundColor,
      appBar: const CommonAppBar(),
      body: SafeArea(
        child: Padding(
          padding: const EdgeInsets.all(Sizes.size20),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              CelebAvatar(currentCeleb: widget.celeb),
              Gaps.v20,
              Text(
                "Ïñ¥Îñ§ ÏùºÏùÑ ÌïòÍ≥† ÏûàÏñ¥Ïöî?",
                style: TextStyle(
                  fontSize: Sizes.size16,
                  fontWeight: FontWeight.bold,
                ),
              ),
              Gaps.v20,
              if (isLoading)
                Center(child: CircularProgressIndicator())
              else
                Expanded(
                  child: SingleChildScrollView(
                    child: Wrap(
                      runSpacing: Sizes.size8,
                      spacing: Sizes.size8,
                      children: [
                        for (var job in jobs)
                          GestureDetector(
                            onTap: () {
                              print("üëÜ ÏßÅÏóÖ Î≤ÑÌäº ÌÉ≠Îê®: ${job['name']}");
                              _onJobSelected(job['name'], job['id']);
                            },
                            child: InterestButton(
                              interest: job['name'],
                              id: job['id'],
                              isSelected: userInfo.selectedJob == job['name'],
                            ),
                          ),
                      ],
                    ),
                  ),
                ),
              Gaps.v24,
              GestureDetector(
                onTap: isLoading ? null : () => _onNextTap(context),
                child: FormButton(text: 'Ïù¥Îü∞ Í±∏ Ìï¥Ïöî'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
