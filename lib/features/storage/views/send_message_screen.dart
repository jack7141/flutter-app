import 'package:celeb_voice/common/widgets/common_app_%20bar.dart';
import 'package:celeb_voice/common/widgets/form_button.dart';
import 'package:celeb_voice/config/app_config.dart';
import 'package:celeb_voice/constants/gaps.dart';
import 'package:celeb_voice/constants/sizes.dart';
import 'package:celeb_voice/features/main/models/celeb_models.dart';
import 'package:flutter/material.dart';

class SendMessageScreen extends StatefulWidget {
  static const String routeName = "sendMessage";
  static const String routePath = "/sendMessage";

  final CelebModel? celeb;

  const SendMessageScreen({super.key, this.celeb});

  @override
  State<SendMessageScreen> createState() => _SendMessageScreenState();
}

class _SendMessageScreenState extends State<SendMessageScreen> {
  // ÌÖúÌîåÎ¶ø ÏÑ†ÌÉù ÏÉÅÌÉú Î≥ÄÏàòÎì§
  String? _selectedCategory;
  String? _selectedSituation;
  String _nicknameInput = "";
  final TextEditingController _nicknameController = TextEditingController();
  final TextEditingController _mainMessageController = TextEditingController();
  bool _isTemplateApplied = false; // ÌÖúÌîåÎ¶ø Ï†ÅÏö© Ïó¨Î∂Ä Îã§Ïãú Ï∂îÍ∞Ä

  @override
  void initState() {
    super.initState();
    print("üé≠ SendMessageScreen - Î∞õÏùÄ celeb Ï†ïÎ≥¥: ${widget.celeb?.name}");
  }

  // ÌÖúÌîåÎ¶ø ÏÑ†ÌÉù Î∞îÌÖÄ ÏãúÌä∏
  void _showTemplateBottomSheet() {
    showModalBottomSheet(
      backgroundColor: Colors.white,
      context: context,
      isScrollControlled: true,
      useRootNavigator: true, // Ïù¥ ÏòµÏÖò Ï∂îÍ∞Ä - ÌïòÎã® ÎÑ§ÎπÑÍ≤åÏù¥ÏÖòÎ∞îÍπåÏßÄ ÎçÆÏùå
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      builder: (BuildContext context) {
        return StatefulBuilder(
          builder: (BuildContext context, StateSetter setState) {
            return Container(
              height: MediaQuery.of(context).size.height * 0.6,
              padding: EdgeInsets.all(20),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Ìï∏Îì§Îü¨
                  Center(
                    child: Container(
                      width: 40,
                      height: 4,
                      decoration: BoxDecoration(
                        color: Colors.grey.shade300,
                        borderRadius: BorderRadius.circular(2),
                      ),
                    ),
                  ),
                  SizedBox(height: 15), // Ïó¨Î∞± Ï°∞Ï†ï
                  Expanded(
                    child: SingleChildScrollView(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          // 1. Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÑ†ÌÉù
                          _buildTemplateQuestion(
                            "1. ÏÑ†Î¨ºÌïòÍ≥† Ïã∂ÏùÄ Î©îÏãúÏßÄ Ïπ¥ÌÖåÍ≥†Î¶¨Î•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.",
                            _getCategoryOptions(),
                            _selectedCategory,
                            (value) =>
                                setState(() => _selectedCategory = value),
                          ),

                          SizedBox(height: 25), // Í∞ÑÍ≤© Ï§ÑÏûÑ
                          // 2. ÏÉÅÌô©/Î¨∏Íµ¨ ÏÑ†ÌÉù
                          _buildTemplateQuestion(
                            "2. Ïñ¥Ïö∏Î¶¨Îäî ÏÉÅÌô©/Î¨∏Íµ¨Î•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.",
                            _getSituationOptions(),
                            _selectedSituation,
                            (value) =>
                                setState(() => _selectedSituation = value),
                          ),

                          SizedBox(height: 25), // Í∞ÑÍ≤© Ï§ÑÏûÑ
                          // 3. Ìò∏Ïπ≠ ÏûÖÎ†•
                          Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                "3. Î©îÏãúÏßÄ Î∞õÏùÑ ÏÇ¨ÎûåÏùÑ Î≠êÎùºÍ≥† Î∂ÄÎ•¥Î©¥ Ï¢ãÏùÑÍπåÏöî?",
                                style: TextStyle(
                                  fontSize: 16,
                                  fontWeight: FontWeight.w600,
                                  color: Color(0xff463e8d),
                                ),
                              ),
                              SizedBox(height: 12),
                              Container(
                                padding: EdgeInsets.symmetric(
                                  horizontal: 12, // 14 ‚Üí 12Î°ú Ï§ÑÏûÑ
                                  vertical: 6, // 8 ‚Üí 6ÏúºÎ°ú Ï§ÑÏûÑ
                                ),
                                decoration: BoxDecoration(
                                  color: Colors.white,
                                  borderRadius: BorderRadius.circular(
                                    10,
                                  ), // 12 ‚Üí 10ÏúºÎ°ú Ï§ÑÏûÑ
                                  border: Border.all(color: Color(0xffc3c7cb)),
                                ),
                                child: TextField(
                                  controller: _nicknameController,
                                  onChanged: (value) =>
                                      setState(() => _nicknameInput = value),
                                  decoration: InputDecoration(
                                    hintText: "Ïòà: ÎØºÏàòÏïº, ÏπúÍµ¨, Ïñ∏Îãà Îì±",
                                    hintStyle: TextStyle(
                                      color: Color(0xffc3c7cb),
                                      fontSize: 13, // 14 ‚Üí 13ÏúºÎ°ú Ï§ÑÏûÑ
                                    ),
                                    border: InputBorder.none,
                                    contentPadding: EdgeInsets.zero,
                                  ),
                                  style: TextStyle(
                                    fontSize: 13, // 14 ‚Üí 13ÏúºÎ°ú Ï§ÑÏûÑ
                                    color: Color(0xff463e8d),
                                  ),
                                ),
                              ),
                            ],
                          ),

                          SizedBox(height: 30), // ÏôÑÎ£å Î≤ÑÌäº ÏúÑ Í∞ÑÍ≤© Ï§ÑÏûÑ
                          // ÏôÑÎ£å Î≤ÑÌäº
                          SizedBox(
                            width: double.infinity,
                            child: ElevatedButton(
                              onPressed:
                                  _selectedCategory != null &&
                                      _selectedSituation != null &&
                                      _nicknameInput.isNotEmpty
                                  ? () {
                                      Navigator.pop(context);
                                      _applyTemplate();
                                    }
                                  : null,
                              style: ElevatedButton.styleFrom(
                                backgroundColor: Color(0xff9e9ef4),
                                padding: EdgeInsets.symmetric(vertical: 16),
                                shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(30),
                                ),
                              ),
                              child: Text(
                                "Î©îÏãúÏßÄ ÏôÑÏÑ±",
                                style: TextStyle(
                                  color: Colors.white,
                                  fontSize: 16,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                            ),
                          ),
                        ],
                      ),
                    ),
                  ),
                ],
              ),
            );
          },
        );
      },
    );
  }

  // ÌÖúÌîåÎ¶ø ÏßàÎ¨∏ ÏúÑÏ†Ø ÎπåÎçî
  Widget _buildTemplateQuestion(
    String question,
    List<String> options,
    String? selectedValue,
    Function(String) onSelect,
  ) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          question,
          style: TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.w600,
            color: Color(0xff463e8d),
          ),
        ),
        SizedBox(height: 12),
        SizedBox(
          height: 35, // 40 ‚Üí 35Î°ú Îçî Ï§ÑÏûÑ
          child: ListView.builder(
            scrollDirection: Axis.horizontal,
            itemCount: options.length,
            itemBuilder: (context, index) {
              final option = options[index];
              final isSelected = selectedValue == option;

              return Padding(
                padding: EdgeInsets.only(right: 8),
                child: GestureDetector(
                  onTap: () => onSelect(option),
                  child: IntrinsicWidth(
                    // ÌÖçÏä§Ìä∏ ÌÅ¨Í∏∞Ïóê ÎßûÏ∂∞ ÎÑàÎπÑ Ï°∞Ï†ï
                    child: Container(
                      height: 35, // ÎÜíÏù¥ Í≥†Ï†ï
                      padding: const EdgeInsets.symmetric(
                        vertical: 6, // 8 ‚Üí 6ÏúºÎ°ú Îçî Ï§ÑÏûÑ
                        horizontal: 12, // 16 ‚Üí 12Î°ú Îçî Ï§ÑÏûÑ
                      ),
                      decoration: BoxDecoration(
                        color: isSelected
                            ? Color.fromARGB(255, 218, 218, 248)
                            : Colors.white,
                        borderRadius: BorderRadius.circular(18), // 20 ‚Üí 18Î°ú Ï§ÑÏûÑ
                        border: Border.all(
                          color: isSelected
                              ? const Color(0xff4d458e)
                              : Color(0xffc3c7cb),
                          width: 1,
                        ),
                      ),
                      alignment: Alignment.center, // ÌÖçÏä§Ìä∏Î•º Ï†ïÏ§ëÏïôÏóê Ï†ïÎ†¨
                      child: Text(
                        option,
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 13, // 14 ‚Üí 13ÏúºÎ°ú Ï°∞Í∏à Îçî Ï§ÑÏûÑ
                          color: isSelected
                              ? Color(0xff4d458e)
                              : Color(0xffc3c7cb),
                        ),
                        textAlign: TextAlign.center, // ÌÖçÏä§Ìä∏ Ï§ëÏïô Ï†ïÎ†¨
                      ),
                    ),
                  ),
                ),
              );
            },
          ),
        ),
      ],
    );
  }

  // Ïπ¥ÌÖåÍ≥†Î¶¨ ÏòµÏÖòÎì§
  List<String> _getCategoryOptions() {
    return ["ÏÉùÏùºÏ∂ïÌïò", "ÏùëÏõêÎ©îÏãúÏßÄ", "Í≥†ÎßàÏö¥ ÎßàÏùå", "ÏÇ¨ÎûëÍ≥†Î∞±", "ÏúÑÎ°ú", "Ï∂ïÌïò", "ÏïàÎ∂Ä"];
  }

  // ÏÉÅÌô©/Î¨∏Íµ¨ ÏòµÏÖòÎì§
  List<String> _getSituationOptions() {
    return ["Îî∞ÎúªÌïú Îßê", "Ïú†Î®∏Îü¨Ïä§Ìïú Îßê", "ÏßÑÏã¨Ïñ¥Î¶∞ Îßê", "Í≤©Î†§Ïùò Îßê", "Ïû¨ÎØ∏ÏûàÎäî Îßê", "Í∞êÎèôÏ†ÅÏù∏ Îßê"];
  }

  // Ìò∏Ïπ≠ ÏòµÏÖòÎì§
  List<String> _getNicknameOptions() {
    return ["ÏπúÍµ¨", "ÎèôÏÉù", "Ïñ∏Îãà", "ÎàÑÎÇò", "Ìòï", "Ïò§Îπ†", "Ïù¥Î¶Ñ", "Î≥ÑÎ™Ö"];
  }

  // ÌÖúÌîåÎ¶ø Ï†ÅÏö©
  void _applyTemplate() {
    print("‚úÖ ÏÑ†ÌÉùÎêú ÌÖúÌîåÎ¶ø:");
    print("Ïπ¥ÌÖåÍ≥†Î¶¨: $_selectedCategory");
    print("ÏÉÅÌô©: $_selectedSituation");
    print("Ìò∏Ïπ≠: $_nicknameInput");

    // ÌÖúÌîåÎ¶ø Î©îÏãúÏßÄ ÏÉùÏÑ±
    String templateMessage = _generateTemplateMessage();

    // Î©îÏù∏ TextFieldÏóê ÌÖúÌîåÎ¶ø Ï†ÅÏö©
    setState(() {
      _mainMessageController.text = templateMessage;
      _isTemplateApplied = true; // ÌÖúÌîåÎ¶ø Ï†ÅÏö© ÏÉÅÌÉúÎ°ú Î≥ÄÍ≤Ω
    });

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text("ÌÖúÌîåÎ¶øÏù¥ Ï†ÅÏö©ÎêòÏóàÏäµÎãàÎã§!"),
        backgroundColor: Color(0xff9e9ef4),
      ),
    );
  }

  // ÌÖúÌîåÎ¶ø Î©îÏãúÏßÄ ÏÉùÏÑ±
  String _generateTemplateMessage() {
    String celebName = widget.celeb?.name ?? "ÏÖÄÎüΩ";
    String nickname = _nicknameInput;

    // Ïπ¥ÌÖåÍ≥†Î¶¨ÏôÄ ÏÉÅÌô©Ïóê Îî∞Î•∏ ÌÖúÌîåÎ¶ø ÏÉùÏÑ±
    if (_selectedCategory == "ÏÉùÏùºÏ∂ïÌïò") {
      return "$nicknameÏïÑ, ÎÑ§Í∞Ä ÌÉúÏñ¥ÎÇú Í∑∏ ÎÇ†ÎèÑ ÏÑ∏ÏÉÅÎèÑ Ï°∞Í∏à Îçî Î∞òÏßùÏòÄÏùÑÍ±∞Ïïº. $celebNameÏùò Ïò§ÎäòÎèÑ Î∞òÏßùÏù¥Îäî ÌïòÎ£®Ïù¥Í∏∏ Î∞îÎûÑÍ≤å. ÏÉùÏùº Ï∂ïÌïòÌï¥!";
    } else if (_selectedCategory == "ÏùëÏõêÎ©îÏãúÏßÄ") {
      return "$nicknameÏïÑ, ÌûòÎì† ÏùºÏù¥ ÏûàÏñ¥ÎèÑ $celebNameÏù¥ Ìï≠ÏÉÅ ÎÑ§ Í≥ÅÏóê ÏûàÎã§Îäî Í±∏ ÏûäÏßÄÎßà. ÎÑå Ï†ïÎßê ÏûòÌïòÍ≥† ÏûàÏñ¥. ÌôîÏù¥ÌåÖ!";
    } else if (_selectedCategory == "Í≥†ÎßàÏö¥ ÎßàÏùå") {
      return "$nicknameÏïÑ, ÎÑ§Í∞Ä ÏûàÏñ¥ÏÑú $celebNameÏùò ÌïòÎ£®Í∞Ä Îçî ÌäπÎ≥ÑÌï¥Ï†∏. Í≥†ÎßàÏõå, Ï†ïÎßêÎ°ú.";
    } else if (_selectedCategory == "ÏÇ¨ÎûëÍ≥†Î∞±") {
      return "$nicknameÏïÑ, $celebNameÏùò ÎßàÏùåÏùÑ Ï†ÑÌïòÍ≥† Ïã∂Ïñ¥. ÎÑàÎ•º Ï†ïÎßê ÎßéÏù¥ Ï¢ãÏïÑÌï¥.";
    } else if (_selectedCategory == "ÏúÑÎ°ú") {
      return "$nicknameÏïÑ, ÌûòÎì§ ÎïåÎäî $celebNameÏùÑ ÏÉùÍ∞ÅÌï¥Ï§ò. Î™®Îì† Í≤å Í¥úÏ∞ÆÏïÑÏßàÍ±∞Ïïº.";
    } else if (_selectedCategory == "Ï∂ïÌïò") {
      return "$nicknameÏïÑ, Ï†ïÎßê Ï∂ïÌïòÌï¥! $celebNameÎèÑ ÎÑ§Í∞Ä Ïù¥Î§ÑÎÇ∏ ÏùºÎì§Ïù¥ ÎÑàÎ¨¥ ÏûêÎûëÏä§Îü¨Ïõå.";
    } else {
      // ÏïàÎ∂Ä
      return "$nicknameÏïÑ, Ïûò ÏßÄÎÇ¥Í≥† ÏûàÏñ¥? $celebNameÏù¥ ÏïàÎ∂ÄÎ•º Ï†ÑÌïòÍ≥† Ïã∂ÏóàÏñ¥. Ïò§ÎäòÎèÑ Ï¢ãÏùÄ ÌïòÎ£® Î≥¥ÎÇ¥!";
    }
  }

  // ÌÖúÌîåÎ¶ø Ï¥àÍ∏∞Ìôî
  void _resetTemplate() {
    setState(() {
      _mainMessageController.clear();
      _isTemplateApplied = false;
      _selectedCategory = null;
      _selectedSituation = null;
      _nicknameInput = "";
      _nicknameController.clear();
    });
  }

  // Î©îÏãúÏßÄ Í≤ÄÌÜ† ÏïàÎÇ¥ Îã§Ïù¥ÏñºÎ°úÍ∑∏
  void _showMessageReviewDialog() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16),
          ),
          insetPadding: EdgeInsets.symmetric(horizontal: 40),
          contentPadding: EdgeInsets.fromLTRB(24, 20, 24, 10),
          content: Text(
            'ÏßÅÏ†ë ÏûëÏÑ±ÌïòÎäî Î©îÏãúÏßÄÎäî\nÍ≤ÄÌÜ† ÌõÑ Î∞úÏÜ° Í∞ÄÎä•ÌïòÎ©∞,\n1~2Ïùº ÏÜåÏöîÎê† Ïàò ÏûàÏäµÎãàÎã§.',
            textAlign: TextAlign.center,
            style: TextStyle(
              fontSize: 16,
              color: Colors.black,
              fontWeight: FontWeight.bold,
            ),
          ),
          actions: [
            Center(
              child: SizedBox(
                width: 120,
                child: TextButton(
                  onPressed: () {
                    Navigator.of(context).pop();
                  },
                  style: TextButton.styleFrom(
                    backgroundColor: Color(0xff9e9ef4),
                    foregroundColor: Colors.white,
                    padding: EdgeInsets.symmetric(vertical: 2),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(20),
                    ),
                  ),
                  child: Text(
                    'ÌôïÏù∏',
                    style: TextStyle(fontSize: 16, fontWeight: FontWeight.w600),
                  ),
                ),
              ),
            ),
            SizedBox(height: 10),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Theme.of(context).appBarTheme.backgroundColor,
      appBar: CommonAppBar(
        title: widget.celeb != null ? "${widget.celeb!.name}ÏóêÍ≤å Î©îÏãúÏßÄ" : "Î©îÏãúÏßÄ ÏûëÏÑ±",
      ),
      body: SafeArea(
        child: Padding(
          padding: const EdgeInsets.all(Sizes.size20),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                "ÏπúÍµ¨ÏóêÍ≤å ÏÑ†Î¨ºÌï† Î©îÏãúÏßÄÎ•º\nÏ†ÅÏñ¥Î≥¥ÏÑ∏Ïöî.",
                style: TextStyle(
                  fontSize: Sizes.size28,
                  fontWeight: FontWeight.bold,
                ),
              ),
              Gaps.v20,
              Stack(
                // Stack Îã§Ïãú Ï∂îÍ∞Ä
                children: [
                  Container(
                    padding: const EdgeInsets.all(16.0),
                    decoration: BoxDecoration(
                      color: Colors.white,
                      borderRadius: BorderRadius.circular(16),
                      border: Border.all(color: Colors.grey.shade300),
                      boxShadow: [
                        BoxShadow(
                          color: Colors.black.withOpacity(0.05),
                          spreadRadius: 1,
                          blurRadius: 3,
                          offset: Offset(0, 1),
                        ),
                      ],
                    ),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        // ÏÖÄÎüΩ ÏïÑÎ∞îÌÉÄÏôÄ Ïù¥Î¶Ñ
                        if (widget.celeb != null) ...[
                          Container(
                            padding: EdgeInsets.all(8),
                            child: Row(
                              children: [
                                Container(
                                  width: 45,
                                  height: 45,
                                  decoration: BoxDecoration(
                                    shape: BoxShape.circle,
                                    color: Colors.grey.shade200,
                                    border: Border.all(
                                      color: Color(0xff9e9ef4).withOpacity(0.3),
                                      width: 2,
                                    ),
                                  ),
                                  child: ClipRRect(
                                    borderRadius: BorderRadius.circular(22.5),
                                    child: Image.network(
                                      AppConfig.getImageUrl(
                                        widget.celeb!.imagePath,
                                      ),
                                      width: 45,
                                      height: 45,
                                      fit: BoxFit.cover,
                                      errorBuilder:
                                          (context, error, stackTrace) {
                                            return Container(
                                              width: 45,
                                              height: 45,
                                              decoration: BoxDecoration(
                                                shape: BoxShape.circle,
                                                color: Colors.grey.shade200,
                                              ),
                                              child: Icon(
                                                Icons.person,
                                                size: 26,
                                                color: Colors.grey.shade500,
                                              ),
                                            );
                                          },
                                      loadingBuilder:
                                          (context, child, loadingProgress) {
                                            if (loadingProgress == null)
                                              return child;
                                            return Container(
                                              width: 45,
                                              height: 45,
                                              decoration: BoxDecoration(
                                                shape: BoxShape.circle,
                                                color: Colors.grey.shade200,
                                              ),
                                              child: Center(
                                                child: CircularProgressIndicator(
                                                  strokeWidth: 2,
                                                  valueColor:
                                                      AlwaysStoppedAnimation<
                                                        Color
                                                      >(Color(0xff9e9ef4)),
                                                ),
                                              ),
                                            );
                                          },
                                    ),
                                  ),
                                ),
                                Gaps.h12,
                                Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Text(
                                      widget.celeb!.name,
                                      style: TextStyle(
                                        fontSize: 16,
                                        fontWeight: FontWeight.w600,
                                        color: Colors.black,
                                      ),
                                    ),
                                  ],
                                ),
                              ],
                            ),
                          ),
                          Gaps.v16,
                        ],
                        Container(
                          margin: const EdgeInsets.only(left: 2.0, right: 2.0),
                          child: TextField(
                            controller: _mainMessageController,
                            readOnly: _isTemplateApplied, // ÌÖúÌîåÎ¶ø Ï†ÅÏö© Ïãú ÏùΩÍ∏∞ Ï†ÑÏö©
                            maxLines: 6,
                            decoration: InputDecoration(
                              hintText: widget.celeb != null
                                  ? "${widget.celeb!.name}Ïùò Î™©ÏÜåÎ¶¨Î°ú Ïñ¥Îñ§ Î©îÏãúÏßÄÎ•º Ï†ÑÎã¨Ìï†ÍπåÏöî?"
                                  : "Î©îÏãúÏßÄÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî",
                              hintStyle: TextStyle(
                                color: Colors.grey.shade500,
                                fontSize: 14,
                              ),
                              border: InputBorder.none,
                              contentPadding: EdgeInsets.zero,
                            ),
                            style: TextStyle(
                              fontSize: 14,
                              height: 1.5,
                              color: _isTemplateApplied
                                  ? Colors.grey.shade700
                                  : Colors.black, // ÌÖúÌîåÎ¶ø Ï†ÅÏö© Ïãú ÌöåÏÉâ
                            ),
                          ),
                        ),
                        Gaps.v12,
                      ],
                    ),
                  ),
                  // ÌÖúÌîåÎ¶ø Ï†ÅÏö© Ïãú ÌöåÏÉâ Ïò§Î≤ÑÎ†àÏù¥ Îã§Ïãú Ï∂îÍ∞Ä
                  if (_isTemplateApplied)
                    Positioned.fill(
                      child: Container(
                        decoration: BoxDecoration(
                          color: Colors.grey.withOpacity(0.1), // ÌöåÏÉâ Ïò§Î≤ÑÎ†àÏù¥
                          borderRadius: BorderRadius.circular(16),
                        ),
                      ),
                    ),
                ],
              ),
              Gaps.v28,
              GestureDetector(
                onTap: _showTemplateBottomSheet, // Ìï≠ÏÉÅ ÌÅ¥Î¶≠ Í∞ÄÎä• (ÏÉà ÌÖúÌîåÎ¶øÏúºÎ°ú ÍµêÏ≤¥)
                child: FractionallySizedBox(
                  widthFactor: 1,
                  child: AnimatedContainer(
                    duration: const Duration(milliseconds: 300),
                    padding: const EdgeInsets.symmetric(vertical: Sizes.size16),
                    decoration: BoxDecoration(
                      color: const Color(0xff9e9ef4).withOpacity(0.16),
                      borderRadius: BorderRadius.circular(Sizes.size64),
                    ),
                    child: Text(
                      'ÌÖúÌîåÎ¶ø ÏÇ¨Ïö©ÌïòÍ∏∞',
                      style: TextStyle(
                        fontSize: Sizes.size16,
                        fontWeight: FontWeight.bold,
                        color: Color(0xff4638d9),
                      ),
                      textAlign: TextAlign.center,
                    ),
                  ),
                ),
              ),
              Gaps.v14,
              GestureDetector(
                onTap: _showMessageReviewDialog,
                child: FormButton(
                  text: widget.celeb != null
                      ? '${widget.celeb!.name} Î™©ÏÜåÎ¶¨Î°ú Îì§Ïñ¥Î≥¥Í∏∞'
                      : 'Îì§Ïñ¥Î≥¥Í∏∞',
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
